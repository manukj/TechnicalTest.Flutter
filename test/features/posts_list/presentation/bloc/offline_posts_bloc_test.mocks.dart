// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_tech_task/test/features/posts_list/presentation/bloc/offline_posts_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:flutter_tech_task/core/error/failures.dart' as _i7;
import 'package:flutter_tech_task/domain/entities/post.dart' as _i8;
import 'package:flutter_tech_task/domain/repositories/offline_posts_repository.dart'
    as _i3;
import 'package:flutter_tech_task/domain/repositories/post_repository.dart'
    as _i2;
import 'package:flutter_tech_task/features/posts_list/usecases/post_list_usecase.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePostRepository_0 extends _i1.SmartFake
    implements _i2.PostRepository {
  _FakePostRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOfflinePostsRepository_1 extends _i1.SmartFake
    implements _i3.OfflinePostsRepository {
  _FakeOfflinePostsRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostListUseCase extends _i1.Mock implements _i5.PostListUseCase {
  MockPostListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PostRepository get postRepository => (super.noSuchMethod(
        Invocation.getter(#postRepository),
        returnValue: _FakePostRepository_0(
          this,
          Invocation.getter(#postRepository),
        ),
      ) as _i2.PostRepository);

  @override
  _i3.OfflinePostsRepository get offlinePostsRepository => (super.noSuchMethod(
        Invocation.getter(#offlinePostsRepository),
        returnValue: _FakeOfflinePostsRepository_1(
          this,
          Invocation.getter(#offlinePostsRepository),
        ),
      ) as _i3.OfflinePostsRepository);

  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.Post>>> getPosts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, List<_i8.Post>>>.value(
            _FakeEither_2<_i7.Failure, List<_i8.Post>>(
          this,
          Invocation.method(
            #getPosts,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.Post>>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, _i8.Post>> getPostById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostById,
          [id],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, _i8.Post>>.value(
            _FakeEither_2<_i7.Failure, _i8.Post>(
          this,
          Invocation.method(
            #getPostById,
            [id],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, _i8.Post>>);

  @override
  _i6.Future<List<_i8.Post>> getOfflinePosts() => (super.noSuchMethod(
        Invocation.method(
          #getOfflinePosts,
          [],
        ),
        returnValue: _i6.Future<List<_i8.Post>>.value(<_i8.Post>[]),
      ) as _i6.Future<List<_i8.Post>>);

  @override
  _i6.Future<void> savePostOffline(_i8.Post? post) => (super.noSuchMethod(
        Invocation.method(
          #savePostOffline,
          [post],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> removePostOffline(int? postId) => (super.noSuchMethod(
        Invocation.method(
          #removePostOffline,
          [postId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
